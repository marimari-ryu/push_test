Javaについての復習　個人的に忘れやすいとこ


インデント・・空白を入れることで見やすくする（用語）


リテラル・・数字の５とか文字列”明日”とかソースコードに記述されている具体的な値をリテラルという。


エスケープシーケンス・・￥記号とそれに続く一文字の合計二文字による記述のこと。

EX) \"　二重引用符記号（"） 	 \\　円記号　	　￥n　改行




＝演算子は右から左に評価される

a = b = 10	b = 10 →→→→a = 10 
最も右の１０がbに代入され式自体が10となる
次に10をaに代入する。


％オペランドの意味は、剰余。

9 % 2 = 1;となる



異なる型での演算を行った結果意味的に大きな型に統一される。

EX)　double型 / int型　＝　double型になる。

片方のオペランドがString型ならString型になる

EX)	"私の年齢は" + 25　→→→→"私の年齢は25"になる





int age = new java.util.Random().nextInt(上限値);




波かっこ{}は次の内容が一行だったら省略可能。

EX)
	} else		//ここ本来は　}がいるのだが次の行が一行のために省略可能となっている

	System.out.println("DVDを見ます")



文字列は　==で比較出来ない

＜文字列の比較＞

文字列型の変数.equals(比較相手の文字列)



＜論理演算子＞
〜かつ &&　　または ||


＜繰り返し文＞
条件の回数などが決まっていたらfor文を使った方がいい。




配列(array)って英語らしい。

break文・・繰り返し自体を中断

continue文・・今回の周だけを中断し次の周へ



拡張for文まとめ

	for(要素の型　任意の変数名: 配列変数名)

これは、配列の要素を順に取り出すことができ、ループ変数やインデックスを記述する必要がない
すっきりしたソースコードとなる。




メソッドで呼び出したいときは、同じパッケージ内ならimportする必要はない
違うパッケージだと　パッケージ名.クラス名でimportする必要がある。

メソッドで
渡す値のことを実引数、受けとる変数のことを仮引数という。





オーバーロード・・引数の＊個数か＊型が異なると同じ名前のメソッドを複数定義出来る。




<メソッドのシグネチャ>


メソッド名、引数の個数・型と並び順をまとめてメソッドのシグネチャという（signature）(署名・サイン)




デフォルトパッケージ(無名パッケージ)・・デフォルトパッケージに属するクラスは、importすることが出来ない

↑↑これ知らんかった。して、しょうみ考えたことなかったな
今思うとimportしてるやつってパッケージ指定してたなと。





Java APIに含まれる代表的なパッケージ

java.lang・・javaに欠かせない重要なクラス群

java.util・・プログラミングを便利にする様々なクラス群

java.math・・数学に関するクラス群

java.net・・ネットワーク通信などを行うためのクラス群

java.io・・ファイルの読み書きなど、データを逐次処理するためのクラス群



＜オブジェクト指向の本質＞

本質としては、現実世界の登場人物とそのふるまいを、コンピュータ内の仮想世界で再現する


情報保持責任と行動責任をもっている
また、この上記二つを行うために属性と操作を持っている。

属性・・登場人物に関する情報を覚えておく箱。

操作・・その登場人物が行う行動や動作の手順。



＜オブジェクトを生み出す手順＞

①各オブジェクトが負うべき責務を考え、属性、操作の種類と内容を定義する。

②各オブジェクトを仮想世界に生み出し動かす。


クラスを定義してそのクラスに基づいてオブジェクトを生成する。


オブジェクトという単語は、時々クラスのことを指しているかもしれないあいまいなものである。

EX)　クラス or オブジェクト

雛形ではなく、その型から生み出された仮想世界で活動する実体を厳密に示したい場合は、
インスタンスという単語を用いる。 


クラスからインスタンスを生成する行為をインスタンス化と表現することがある。

EX)  インスタンス　or オブジェクト




＜フィールドの宣言＞
属性を宣言するには、クラスブロックの中に変数宣言を記述する。

定数フィールドの名前は一目で分かるように大文字で記述することが推奨される


＜メンバ＞（member）

メンバというのは、フィールドとメソッドの総称　
総称・・（ある共通点を持つ個々のものを何種かまとめて、全体として一つの呼び名でいうこと。）


クラスを定義することでそのクラスに基づいてインスタンスを生成することが出来る。
そのクラスから生まれたインスタンスを入れる変数の型が利用出来るようになる。

EX)Heroクラスを定義すると、Hero型の変数が利用できるようになる。このように
クラスを定義することで利用可能になる型のことをクラス型という。





Hero h = new Hero();

↑↑今までは、Hero型のインスタンスを生成するnew化するしか考えてなかった。
しかし勉強したら右辺の　new Hero()を左辺のHerok型の変数hにしているという構図



























