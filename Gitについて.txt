＜Gitについて＞

Gitとは、分散型バージョン管理システムの一つで、もともとLinuxのソースコードを効果的に管理するために開発されました。

Subversionとは、集中型バージョン管理システムという分類にあたるシステムです。
(1) サーバ上に「中央リポジトリ」を作り、そこからソースコードを取得する。
(2) ソースコードを編集後、「コミット」すると、内容が中央リポジトリに反映される
(3) ファイルをロックして、他人から編集されないようにもできる


<複数人での開発>
↓gitを使って複数人で開発するときはこんなかんじらしい↓
(1) 自分のある時点までのコミット内容をpush（送る、押し出すというイメージ）できる
(2) 他人のコードの差分をpull（取得、引っ張ってくるイメージ）できる
(3) pullすると自動的にマージされ、自分+他人の最新コードになる


下記のとおりです。
1.クローン
2.コミット
3.プッシュ
4.マージ
5.プル
6.フェッチ


1.クローン
「クローン」は、リモートリポジトリを複製してローカルリポジトリを作るコマンド。
「リポジトリ」とは、GitHubでファイルやディレクトリを保存する場所のことです。

リポジトリをGitHubからローカルマシンにコピーすることで、クローンを作成できます。
開発現場でも頻繁に使われる作業なので、覚えておきましょう。



2.コミット
コミットするというのは、「変更内容をリポジトリに反映する」ということ
コミットを実行すると、リポジトリの内では、前回コミットした時の状態から現在の状態までの差分を
記録したコミット(またはリビジョン)と呼ばれるものが作成されます。
途中のセーブデータのようなイメージ。他と違うのは、今までのデータが残っているということ。



5.プル
みんなの更新内容を取得してくるのがpullです。
自分以外の開発者たちも、皆それぞれpushを繰り返しています。
pullすることで、自分のコードと他人のコードがマージされ、最新の状態にすることができます。
リモートリポジトリ・・他のコンピュータの中にある（ことが多い）「これは、みんなで一緒に使う場所だよ！」な
保管場所（リポジトリ）のこと(専用のサーバに配置して複数人で共有するためのリポジトリです。)

ローカルリポジトリ・・自分のパソコンの中にある「これは自分専用だよ！」な保管場所（リポジトリ）のこと

ローカルマシン・・自分が現在利用しているもしくは直接利用できるパソコンのことである。





Gitというのは
何よりも特徴的なのは、「分散VCS」であるということ

みんながそれぞれ自分の手元に「自分のリポジトリ」を持つことになり、作業コピーに対して行った変更を、
「たったひとつのリポジトリ」に反映させるのではなくて、
「分散してるリポジトリ」(=手元のリポジトリ)に対して反映させるので、「分散 VCS」


ディレクトリ（英：directory）とはコンピュータの世界における「書類入れ」のこと


gitを使って複数人で開発するときはこんなかんじらしい
(1) 自分のある時点までのコミット内容をpush（送る、押し出すというイメージ）できる
(2) 他人のコードの差分をpull（取得、引っ張ってくるイメージ）できる
(3) pullすると自動的にマージされ、自分+他人の最新コードになる



ワーキングディレクトリ・・カレントディレクトリ（英語: current directory、現行ディレクトリ）とは、
コンピューティングの分野で、階層型ファイルシステムを使用している場合に、
そのプロセスが現在関連付けられている（現在の位置である）ディレクトリのことである。
Windowsでは作業フォルダとも呼ばれることがある。また、ワーキングディレクトリとも。




コマンドラインツール（英：command line tool）とは
キーボードでぺちぺち入力することで命令する（操作する）プログラム
コマンドラインは、本来の意味では、コマンドプロンプト（パソコンに詳しい人が使っている黒い画面）などの入力行を指します。



もしも、他人と同じところを編集していた場合、
他人とかち合ってしまうことを「コンフリクト」といいます。




stage とは unstage とは
Git では、コミットの前に、「作業ディレクトリ内のこのファイルの内容はリポジトリに反映してほしいけど、
このファイルの内容は反映してほしくない」みたいなことを Git に教えておく必要があります。
そうしないと、Git さんはコミットのときに「えっこれどのファイルのどの変更を
リポジトリに反映すればいいの！？」となってしまいます。
このとき、「次にコミットするときにリポジトリに反映される内容の置き場」のことを、
"staging area" と呼んでいます。



さっき git add nyan.txt としたことで、nyan.txt はその時点でのそのファイルの内容が
「staging area に上げられた」ことになります。これを、 「stage する」と言います。
この状態で commit を行うと、Git は stage に上がっている内容をリポジトリに登録します。
では unstage とは？ もうお分かりでしょう。
「stage」が「staging areaにファイルを置く」なので、
「unstage」はその逆、「staging area からファイルの内容を取り下げる」です。





Changes not staged for commit:」のあとに括弧でごにょごにょ言って、
その下に 「modified: nyan.txt」です。

日本語にすれば、「コミット用に stage されてない変更は以下の通りです。
変更されたファイル：nyan.txt」くらいの感じでしょうか。


git rm は、(git remove)

作業ディレクトリにファイルが存在するときにはそのファイルを削除する(すでに無い場合はなにもしない)
その後「ファイルを削除したよ」という情報を stage する
というコマンドなのです。




master というブランチは、Git さんがリポジトリを作ったときに勝手に作るブランチです。
ブランチというのはコミットオブジェクトを指し示すもの。


git mv を使うと、「作業ディレクトリ内のファイルのリネーム/移動」と、
「その変更を stage」を一気にやってくれる
ちなみに、git mv の mv は move の略です。



ブランチを活用することで、「ある時点のコミット」を共通の親にもつ、
複数の異なるコミットを作り出すことができました。履歴(言い換えれば歴史)が「分岐」したのです。



merge というのは「複数のものをがっちゃんこする」という意味。では、ここで言う「複数のもの」とはなにか？
 これは簡単で、複数のコミットをがっちゃんこするのです。



$ git branch -d my_first_branch
こんな感じで消せます。 -d は delete の d です。ブランチ一覧を確認してみましょう。


git merge ブランチ名 で、今選択されているブランチに ブランチ名 という名前の
ブランチのコミット内容を取り込むことができる


ブランチを作成することを、ギョーカイ用語(？)で「ブランチを切る」と言ったりします。




'recursive' stragy　　回帰的・帰納的　　


ブランチA の内容をブランチ B に反映させるには、ブランチ B を選択して、ブランチ A を merge ですね。


なにか作業を行うときはブランチを切ってから行うと、いつでも「その作業を行う前の状態」に戻れるので便利



マージしたときに競合が発生した場合には、手動でマージする
ファイルを手動で修正
git add ＜修正したファイル＞として「競合を直したよ」と Git に伝える
全部直したら git commit でマージコミットを完成させる




「特定の目的の作業を行うためのブランチ」のことを、
「トピックブランチ」とか「フィーチャーブランチ」と呼ぶことが多いです。
あるトピックやある機能に特化したブランチ、くらいの意味ですね。




ファイルを上書き保存して終了する「:wq」「ZZ」
編集済みのファイルを保存するには「:wq」コマンドまたは「ZZ」コマンドを利用します。

vimでのコマンド
:wq / ZZ
ファイルは上書き保存されて終了します。




git rebase のrebaseは新しいベース［土台・基準レベル］を～に設定する
～の〕ベース［基底・基準］アドレスを変更する


直前のコミットという過去を改変するためには、git commit --amend を使う
amend・・修正する



gitディレクトリの追加
mkdir ディレクトリ名


ディレクトリの移動「cd」
「cd」に続けてディレクトリを書くと、そのディレクトリへ移動できる

cd ディレクトリ名 


Gitのaddコマンド
このコマンドは、ワーキング・ツリーの中でコンテンツ（ファイルなど）を見つけて
インデックスに追加するためのもの。

インデックスに追加するというと難しいかもしれないが、要するにGit管理の対象に入れるという意味。

この操作は、コミット（バージョン管理でその瞬間のデータを記録として残す）のために
ステージ(ステージング)されたコンテンツを準備する。コミットの対象となるのはステージされたコンテンツだけなので注意。



git remote -v でリモートリポジトリを一覧表示!


git bashの exitが終了コマンド



逆に削除するときは?

$ git remote rm [削除したいリモートリポジトリ名]



URLを変更したい!（リモートリポジトリを変更したい）

$ git remote set-url origin [変更先のURL]



$ git push -f origin master無理矢理PUSHできる



今日はしなかった。

$ git clone [クローン先のURL]




基本的なことはもうできるけなんやろ
もっと取り消しとか名前変更なんかを行いたいな
